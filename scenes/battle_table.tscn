[gd_scene load_steps=6 format=3 uid="uid://1elqayaj0cj6"]

[ext_resource type="PackedScene" uid="uid://d3we480ibjoa8" path="res://scenes/card.tscn" id="1_sqmq8"]
[ext_resource type="Texture2D" uid="uid://bfqtrrndfk5fb" path="res://sprites/cartinha_mesa_back.png" id="2_7xvee"]
[ext_resource type="Texture2D" uid="uid://b1e4xfiddc4jo" path="res://sprites/cenario.png" id="6_6u686"]
[ext_resource type="Texture2D" uid="uid://x5c24tyujtj7" path="res://sprites/mesa_bar.png" id="6_kp2p7"]

[sub_resource type="GDScript" id="GDScript_si2f6"]
script/source = "extends Control

# --- Signals ---
# --- Enums ---
# --- Constants ---


# --- Exported Variables ---
@export var _card_preload: PackedScene
@export var _enemy_hand_container: HBoxContainer
@export var _player_hand_container: HBoxContainer
@export var _player_deck_node: TextureRect
@export var _enemy_deck_node: TextureRect
@export var _used_card_final_position: Marker2D
@export var _player_position: Marker2D
@export var _enemy_position: Marker2D


# --- Public Variables ---


# --- Private Variables ---
var hand_container_offset := {
	1: Vector2(225, 0), 2: Vector2(279, 0), 3: Vector2(333, 0), 
	4: Vector2(387, 0), 5: Vector2(441, 0)}
	
var _test_card := {
	\"name\": \"Card\", \"text\": \"Test\", \"type\": Constants.JokesTypes.PIADINHAS,
	\"rarity\": 1, \"cost\": 1, \"base_force\": 1
}

var _test_card_2 := {
	\"name\": \"Card\", \"text\": \"Test 2\", \"type\": Constants.JokesTypes.TOC_TOC,
	\"rarity\": 1, \"cost\": 1
}

var _card_size := Vector2(104, 152)
var _player_obj: Character
var _enemy_obj: Character
var _player_cards_count := 0
var _enemy_cards_count := 0
var _player_deck := []
var _enemy_deck := []
var _player_discard_pile := []
var _enemy_discard_pile := []
var _current_action := \"\"
var _action_owner: Character


# --- Onready Variables ---


# --- Engine Callbacks ---
func _ready() -> void:
	add_to_group(\"battle_table\")
	
	var player = preload(\"res://scenes/character.tscn\").instantiate()
	var enemy = preload(\"res://scenes/character.tscn\").instantiate()
	
	var player_data = Constants.TEST_PLAYER_DATA.duplicate(true)
	var enemy_data = Constants.TEST_PLAYER_DATA.duplicate(true)
	
	enemy_data[\"name\"] = \"Enemy\"
	enemy_data[\"sprite\"] = \"res://sprites/Enemy.png\"
	
	for i in range(0, 15):
		player_data[\"deck\"].append(_test_card.duplicate(true))
		enemy_data[\"deck\"].append(_test_card_2.duplicate(true))
	
	player.load_player_data(player_data)
	enemy.load_player_data(enemy_data)
	
	prepare_battle(player, enemy)


func _input(p_event: InputEvent) -> void:
	if p_event is InputEventKey and p_event.is_pressed():
#		if p_event.keycode == KEY_SPACE and _enemy_cards_count < 5:
#			_draw_new_card(\"enemy\", _test_card_2)
		
		if p_event.keycode == KEY_Z and _enemy_cards_count > 0:
			var card = _enemy_hand_container.get_child(0)
			request_card_use(card)


# --- Public Functions ---
func prepare_battle(p_player: Character, p_enemy: Character) -> void:
	add_child(p_enemy)
	add_child(p_player)
	
	_player_obj = p_player
	p_player.set_character_type(\"player\")
	
	_enemy_obj = p_enemy
	
	p_player.position = _player_position.position
	p_enemy.position = _enemy_position.position
	_player_deck = p_player.deck.duplicate(true)
	_enemy_deck = p_enemy.deck.duplicate(true)
	_player_deck.shuffle()
	_enemy_deck.shuffle()
	
	_new_turn()


func request_card_use(p_card: Control) -> void:
	if p_card.card_owner != _action_owner:
		return
	
	if p_card.card_owner == _player_obj:
		_player_cards_count -= 1
		_disconnect_player_card_signals(p_card)
	
	else:
		_enemy_cards_count -= 1
	
	p_card.z_index = 3
	p_card.prepare_to_use()
	p_card.reparent($used_cards_pile)
	
	
	var tween = create_tween()
	tween.tween_property(p_card, \"global_position\", 
			_used_card_final_position.global_position, 0.3)
	
	await tween.finished
	p_card.z_index = 0
	
	if p_card.card_owner == _enemy_obj:
		p_card.flip()
		_enemy_discard_pile.append(p_card.get_card_data())
	
	else:
		_player_discard_pile.append(p_card.get_card_data())


# --- Private Functions ---
# - Common Use Functions -
func _draw_new_card(p_who: Character, p_card_info: Dictionary) -> void:
	var new_card = _card_preload.instantiate()
	var used_deck
	
	if p_who == _player_obj:
		_player_cards_count += 1
		used_deck = _player_deck_node
		_connect_player_card_signals(new_card)
	
	else:
		_enemy_cards_count += 1
		used_deck = _enemy_deck_node 
	
	new_card.card_owner = p_who
	
	new_card.position = used_deck.position
	new_card.rotation = used_deck.rotation
	new_card.set_card_to(p_card_info)
	add_child(new_card)
	
	_do_card_tween(new_card)


func _new_turn() -> void:
	await _discard_characters_cards()
	_draw_characters_cards()
	_action_owner = _player_obj


func _draw_characters_cards() -> void:
	if _player_deck.size() < _player_obj.draw_amount:
		await _reset_deck(_player_obj)
	
	if _enemy_deck.size() < _enemy_obj.draw_amount:
		await _reset_deck(_enemy_obj)
	
	for _i in range(0, _player_obj.draw_amount):
		_draw_new_card(_player_obj, _player_deck.pop_front())
	
	for _i in range(0, _enemy_obj.draw_amount):
		_draw_new_card(_enemy_obj, _enemy_deck.pop_front())


func _discard_characters_cards() -> void:
	# Avoid erros in mouse exited signal
	for card in _player_hand_container.get_children():
		card.prepare_to_use()
	
	await get_tree().create_timer(0.3).timeout

	for card in _player_hand_container.get_children():
		_player_discard_pile.append(card.get_card_data())
		card.queue_free()
	
	for card in _enemy_hand_container.get_children():
		_enemy_discard_pile.append(card.get_card_data())
		card.queue_free()
	
	_player_cards_count = 0
	_enemy_cards_count = 0


func _reset_deck(p_who: Character) -> void:
	var deck: Array
	var used_pile: Array
	
	if p_who == _player_obj:
		deck = _player_deck
		used_pile = _player_discard_pile
	
	else:
		deck = _enemy_deck
		used_pile = _enemy_discard_pile
	
	for card in used_pile:
		deck.append(card)
	
	used_pile.clear()
	deck.shuffle()


func _enemy_turn() -> void:
	_action_owner = _enemy_obj
	await get_tree().create_timer(1.0).timeout
	
	if _enemy_cards_count > 0:
		var card = _enemy_hand_container.get_child(0)
		await request_card_use(card)
	
	_new_turn()


func _do_card_tween(p_card: Control) -> void:
	var first_position: Vector2
	var final_position: Vector2
	var container: HBoxContainer
	
	if p_card.card_owner == _player_obj:
		first_position = Vector2(1330, 500)
		final_position = _player_hand_container.global_position + hand_container_offset[_player_cards_count]
		container = _player_hand_container
	
	else:
		first_position = Vector2(-298, 34)
		final_position = _enemy_hand_container.global_position + hand_container_offset[_enemy_cards_count]
		container = _enemy_hand_container
	
	var tween = create_tween()
	tween.tween_property(p_card, \"position\", first_position, 0.4)
	await tween.finished
	
	if p_card.card_owner == _player_obj:
		p_card.flip(true)
	
	tween = create_tween()
	tween.tween_property(p_card, \"position\", final_position, 0.5)
	p_card.z_index = 0
	await tween.finished
	p_card.reparent(container)
	
	if p_card.card_owner == _player_obj:
		p_card.is_on_hand = true


func _connect_player_card_signals(p_card: Control) -> void:
	p_card.gui_input.connect(_on_player_card_gui_input.bind(p_card))
	p_card.mouse_entered.connect(_on_player_card_mouse_entered.bind(p_card))
	p_card.mouse_exited.connect(_on_player_card_mouse_exited.bind(p_card))


func _disconnect_player_card_signals(p_card: Control) -> void:
	p_card.gui_input.disconnect(_on_player_card_gui_input)
	p_card.mouse_entered.disconnect(_on_player_card_mouse_entered)
	p_card.mouse_exited.disconnect(_on_player_card_mouse_exited)


# - Setget Functions -


# - Signal Functions -
func _on_deck_gui_input(p_event: InputEvent) -> void:
	return
#	if p_event is InputEventMouseButton and p_event.is_pressed():
#		if p_event.button_index == MOUSE_BUTTON_LEFT and _player_cards_count < 5:
#			_draw_new_card(\"player\", _test_card)


func _on_player_card_gui_input(p_event: InputEvent, p_card: Control) -> void:
	if p_card.is_on_hand == false:
		return
	
	if p_event is InputEventMouseButton:
		if p_event.button_index == MOUSE_BUTTON_LEFT and p_event.pressed:
			request_card_use(p_card)


func _on_player_card_mouse_entered(p_card: Control) -> void:
	if p_card.is_on_hand == false:
		return
	
	for card in _player_hand_container.get_children():
		if card != p_card:
			card.z_index = 0
		
		else:
			card.z_index = 3
	
	var tween = create_tween()
	tween.tween_property(p_card, \"scale\", Vector2(1.5, 1.5), 0.2)
	await tween.finished
	p_card.z_index = 3


func _on_player_card_mouse_exited(p_card: Control) -> void:
	if p_card.is_on_hand == false:
		return
	
	var tween = create_tween()
	tween.tween_property(p_card, \"scale\", Vector2(1.0, 1.0), 0.2)
	await tween.finished
	p_card.z_index = 0


func _on_end_turn_button_pressed() -> void:
	_enemy_turn()
"

[node name="battle_table" type="Control" node_paths=PackedStringArray("_enemy_hand_container", "_player_hand_container", "_player_deck_node", "_enemy_deck_node", "_used_card_final_position", "_player_position", "_enemy_position")]
layout_mode = 3
anchors_preset = 0
offset_right = 1280.0
offset_bottom = 720.0
mouse_filter = 2
script = SubResource("GDScript_si2f6")
_card_preload = ExtResource("1_sqmq8")
_enemy_hand_container = NodePath("enemy_hand_container")
_player_hand_container = NodePath("player_hand_container")
_player_deck_node = NodePath("player_deck")
_enemy_deck_node = NodePath("enemy_deck")
_used_card_final_position = NodePath("used_enemy_card_position")
_player_position = NodePath("player_position")
_enemy_position = NodePath("enemy_position")
metadata/_edit_lock_ = true

[node name="player_deck" type="TextureRect" parent="."]
z_index = 1
layout_mode = 0
offset_left = 873.0
offset_top = 567.0
offset_right = 913.0
offset_bottom = 617.0
texture = ExtResource("2_7xvee")

[node name="enemy_deck" type="TextureRect" parent="."]
z_index = 1
layout_mode = 0
offset_left = 504.0
offset_top = 442.0
offset_right = 544.0
offset_bottom = 492.0
texture = ExtResource("2_7xvee")

[node name="player_hand_container" type="HBoxContainer" parent="."]
z_index = 2
layout_mode = 0
offset_left = 668.0
offset_top = 574.0
offset_right = 1180.0
offset_bottom = 707.0
size_flags_horizontal = 4
size_flags_vertical = 4
alignment = 1

[node name="enemy_hand_container" type="HBoxContainer" parent="."]
layout_mode = 0
offset_left = 302.0
offset_top = 212.0
offset_right = 543.0
offset_bottom = 261.0
size_flags_horizontal = 4
size_flags_vertical = 4
alignment = 1

[node name="used_cards_pile" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="used_enemy_card_position" type="Marker2D" parent="."]
z_index = 1
position = Vector2(611, 516)
gizmo_extents = 0.0

[node name="used_player_card_position" type="Marker2D" parent="."]
z_index = 1
position = Vector2(787, 521)
gizmo_extents = 0.0

[node name="Cenario" type="TextureRect" parent="."]
z_index = -2
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -640.0
offset_top = -360.0
offset_right = 640.0
offset_bottom = 360.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 4
mouse_filter = 2
texture = ExtResource("6_6u686")
metadata/_edit_lock_ = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(640, 360)

[node name="MesaBar" type="Sprite2D" parent="."]
position = Vector2(697, 360)
texture = ExtResource("6_kp2p7")

[node name="gui" type="CanvasLayer" parent="."]

[node name="end_turn_button" type="Button" parent="gui"]
offset_left = 1051.0
offset_top = 486.0
offset_right = 1205.0
offset_bottom = 548.0
text = "End Turn"

[node name="player_position" type="Marker2D" parent="."]
position = Vector2(655, 660)

[node name="enemy_position" type="Marker2D" parent="."]
position = Vector2(770, 355)

[node name="player_card_start" type="Marker2D" parent="."]
position = Vector2(837, 513)
scale = Vector2(0.3, 0.3)

[node name="enemy_card_start" type="Marker2D" parent="."]
position = Vector2(468, 387)
scale = Vector2(0.3, 0.3)

[node name="card" parent="." instance=ExtResource("1_sqmq8")]
offset_left = 837.0
offset_top = 513.0
offset_right = 972.0
offset_bottom = 693.0
scale = Vector2(0.3, 0.3)

[connection signal="gui_input" from="player_deck" to="." method="_on_deck_gui_input"]
[connection signal="pressed" from="gui/end_turn_button" to="." method="_on_end_turn_button_pressed"]
